# specify the version of docker-compose
version: "3.8"

# define the services/containers to be run
services:
  # define the frontend service
  web:
    container_name: frontend

    depends_on: 
      - api
    
    build: ./client
    
    ports:
      - 3000:3000

    networks:
      - mern-network

    # this is for docker compose watch mode
    # anything mentioned under develop will be watched for changes by docker compose watch and it will perform the action mentioned
    develop:
      # we specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes
        - path: ./client/package.json
          action: rebuild
        - path: ./client/package-lock.json
          action: rebuild
        # it'll watch for changes in the frontend directory and sync the changes with the container real time
        - path: ./client
          target: /app
          action: sync

  # define the api service/container
  api: 
    container_name: backend-api

    depends_on: 
      - db

    build: ./server
    
   
    ports: 
      - 5000:5000
    
    networks:
      - mern-network
    
    # establish docker compose watch mode for the api service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./server/package.json
          action: rebuild
        - path: ./server/package-lock.json
          action: rebuild
        
        # it'll watch for changes in the backend directory and sync the changes with the container real time
        - path: ./server
          target: /app
          action: sync

  # define the db service
  db:
    container_name: mongo-database
    
    image: mongo:latest

    ports:
      - 27017:27017

    volumes:
      - database:/data/db
    
    networks:
      - mern-network
    

# define the volumes to be used by the services
volumes:
  database:

networks:
  mern-network:
    driver: bridge